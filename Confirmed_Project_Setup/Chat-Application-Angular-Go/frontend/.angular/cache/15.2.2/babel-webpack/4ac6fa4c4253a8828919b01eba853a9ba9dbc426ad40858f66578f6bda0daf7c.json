{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class SocketService {\n  constructor() {\n    this.listener = new EventEmitter();\n    this.socket = new WebSocket(\"ws://localhost:12345/ws\");\n    this.socket.onopen = event => {\n      this.listener.emit({\n        \"type\": \"open\",\n        \"data\": event\n      });\n    };\n    this.socket.onclose = event => {\n      this.listener.emit({\n        \"type\": \"close\",\n        \"data\": event\n      });\n    };\n    this.socket.onmessage = event => {\n      this.listener.emit({\n        \"type\": \"message\",\n        \"data\": JSON.parse(event.data)\n      });\n    };\n  }\n  send(data) {\n    this.socket.send(data);\n  }\n  close() {\n    this.socket.close();\n  }\n  getEventListener() {\n    return this.listener;\n  }\n}\nSocketService.ɵfac = function SocketService_Factory(t) {\n  return new (t || SocketService)();\n};\nSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SocketService,\n  factory: SocketService.ɵfac\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,YAAY,QAAQ,eAAe;;AAGxD,OAAM,MAAOC,aAAa;EAKxBC;IAFQ,aAAQ,GAAsB,IAAIF,YAAY,EAAE;IAGtD,IAAI,CAACG,MAAM,GAAG,IAAIC,SAAS,CAAC,yBAAyB,CAAC;IACtD,IAAI,CAACD,MAAM,CAACE,MAAM,GAAGC,KAAK,IAAG;MAC3B,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAC;QAAC,MAAM,EAAE,MAAM;QAAE,MAAM,EAAEF;MAAK,CAAC,CAAC;IACrD,CAAC;IACD,IAAI,CAACH,MAAM,CAACM,OAAO,GAAGH,KAAK,IAAG;MAC5B,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAC;QAAC,MAAM,EAAE,OAAO;QAAE,MAAM,EAAEF;MAAK,CAAC,CAAC;IACtD,CAAC;IACD,IAAI,CAACH,MAAM,CAACO,SAAS,GAAGJ,KAAK,IAAG;MAC9B,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAC;QAAC,MAAM,EAAE,SAAS;QAAE,MAAM,EAAEG,IAAI,CAACC,KAAK,CAACN,KAAK,CAACO,IAAI;MAAC,CAAC,CAAC;IACzE,CAAC;EACH;EAEOC,IAAI,CAACD,IAAY;IACtB,IAAI,CAACV,MAAM,CAACW,IAAI,CAACD,IAAI,CAAC;EACxB;EAEOE,KAAK;IACV,IAAI,CAACZ,MAAM,CAACY,KAAK,EAAE;EACrB;EAEOC,gBAAgB;IACrB,OAAO,IAAI,CAACT,QAAQ;EACtB;;AA5BWN,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAgB,SAAbhB,aAAa;AAAA","names":["EventEmitter","SocketService","constructor","socket","WebSocket","onopen","event","listener","emit","onclose","onmessage","JSON","parse","data","send","close","getEventListener","factory"],"sourceRoot":"","sources":["/home/abishek/Downloads/real-time-chat-app-main/frontend/src/app/socket.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\n\n@Injectable()\nexport class SocketService {\n\n  private socket: WebSocket;\n  private listener: EventEmitter<any> = new EventEmitter();\n\n  public constructor() {\n    this.socket = new WebSocket(\"ws://localhost:12345/ws\");\n    this.socket.onopen = event => {\n      this.listener.emit({\"type\": \"open\", \"data\": event});\n    }\n    this.socket.onclose = event => {\n      this.listener.emit({\"type\": \"close\", \"data\": event});\n    }\n    this.socket.onmessage = event => {\n      this.listener.emit({\"type\": \"message\", \"data\": JSON.parse(event.data)});\n    }\n  }\n\n  public send(data: string) {\n    this.socket.send(data);\n  }\n\n  public close() {\n    this.socket.close();\n  }\n\n  public getEventListener() {\n    return this.listener;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}